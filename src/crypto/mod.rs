pub mod public_key;
pub mod ristretto;
pub mod scalar;
pub mod address;
pub mod secure;
pub mod sha;
pub mod signature;
pub mod commitment;

pub use secure::*;
use core::sync::atomic::{compiler_fence, Ordering};

// Ristretto255 subgroup order (BE)
pub const L: [u8; 32] = [
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0xde, 0xf9, 0xde, 0xa2, 0xf7, 0x9c, 0xd6,
    0x58, 0x12, 0x63, 0x1a, 0x5c, 0xf5, 0xd3, 0xed,
];

// L - 2 for scalar inversion via Fermat's little theorem (BE)
pub const L_MINUS_2: [u8; 32] = [
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0xde, 0xf9, 0xde, 0xa2, 0xf7, 0x9c, 0xd6,
    0x58, 0x12, 0x63, 0x1a, 0x5c, 0xf5, 0xd3, 0xeb,
];

pub const XELIS_G_POINT: ristretto::RistrettoPoint = ristretto::RistrettoPoint {
    x: [
        0x10, 0x63, 0xe2, 0xcc, 0x8c, 0xfe, 0x80, 0xc3,
        0xdd, 0x5b, 0xff, 0x85, 0x68, 0x03, 0x53, 0x7a,
        0x40, 0x97, 0x1f, 0xfa, 0xa8, 0xa6, 0x7c, 0x6c,
        0x2f, 0x41, 0x83, 0xe0, 0x91, 0x8d, 0xe5, 0xd2
    ],
    y: [
        0x15, 0x9a, 0x68, 0x49, 0xe4, 0x4c, 0x3c, 0x7f,
        0x06, 0x1b, 0x3d, 0x57, 0x0f, 0xc4, 0xed, 0x5b,
        0x5d, 0x14, 0xc8, 0xba, 0x42, 0x53, 0xdf, 0x49,
        0xcc, 0x7e, 0xdf, 0x80, 0xf5, 0x33, 0xad, 0x9b
    ],
    z: [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    ],
    t: [
        0x18, 0x78, 0xa0, 0xf0, 0x28, 0x74, 0x89, 0x9a,
        0x99, 0x15, 0xb1, 0x71, 0x9b, 0x54, 0x1c, 0x82,
        0xdf, 0x0f, 0x60, 0x7f, 0x88, 0xae, 0xad, 0x0a,
        0x92, 0x21, 0x75, 0x4c, 0x5a, 0x48, 0x22, 0x4a
    ],
};

// Extracting XELIS_H_POINT...
pub const XELIS_H_POINT: ristretto::RistrettoPoint = ristretto::RistrettoPoint {
    x: [
        0x47, 0x3d, 0x88, 0x97, 0x09, 0x19, 0xad, 0xf0,
        0x37, 0x18, 0xaf, 0xe7, 0x3f, 0xde, 0x3f, 0x2f,
        0x9d, 0x70, 0x6e, 0x74, 0x34, 0x83, 0x35, 0xe2,
        0x50, 0xe5, 0x87, 0xbd, 0xfc, 0xe7, 0x26, 0xb2
    ],
    y: [
        0x44, 0x28, 0x7a, 0xe9, 0x7d, 0x59, 0x7d, 0xf2,
        0x61, 0xe3, 0xd2, 0xbd, 0x86, 0xd6, 0x3d, 0xcc,
        0x94, 0x38, 0x38, 0x4f, 0x31, 0x1c, 0xb7, 0xe5,
        0xcd, 0x52, 0x92, 0x72, 0x02, 0x85, 0xf8, 0xc6
    ],
    z: [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
    ],
    t: [
        0x11, 0x77, 0xcf, 0x94, 0x14, 0x51, 0x75, 0x52,
        0x7c, 0x96, 0x90, 0x8f, 0x6b, 0xd4, 0xb1, 0x78,
        0xa2, 0xf9, 0xf9, 0xf2, 0xcf, 0x0b, 0x9f, 0x75,
        0xac, 0x60, 0xc4, 0x13, 0xde, 0xb3, 0x16, 0x62
    ],
};